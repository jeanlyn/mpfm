name: 'publish'

on:
  workflow_dispatch:
  push:
    branches:
      - release-win

jobs:
  publish-tauri:
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }} 
    steps:
      - uses: actions/checkout@v4

      - name: install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-22.04' # This must match the platform value defined above.
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
   
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'pnpm' # Set this to npm, yarn or pnpm.
      

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable # Set this to dtolnay/rust-toolchain@nightly
        with:
          # Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './ -> target'

      - name: install root dependencies
        run: pnpm install

      - name: install frontend dependencies
        run: cd ui && pnpm install
      
      - name: Download WebView2 Runtime
        run: |
          invoke-webrequest -uri https://github.com/westinyang/WebView2RuntimeArchive/releases/download/109.0.1518.78/Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.x86.cab -outfile Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.x86.cab
          Expand .\Microsoft.WebView2.FixedVersionRuntime.109.0.1518.78.x86.cab -F:* ./

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 注入私钥到环境变量
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          # 可选：显式设置密钥密码（如果有）
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
          RUSTFLAGS: -C target-feature=+crt-static
          TAURI_FIPS_COMPLIANT: true
        with:
          tagName: app-v__VERSION__ # the action automatically replaces \_\_VERSION\_\_ with the app version.
          releaseName: 'App v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          tauriScript: pnpm run tauri
          args: --config tauri.win.conf.json
          afterBuildCommand: |
            powershell -ExecutionPolicy Bypass -Command '
              $ErrorActionPreference = "Stop";
              $bundleDir = "./target/release/bundle";
              Write-Host "Searching for artifacts in $bundleDir to rename (adding -fixed-webview2 suffix).";
              Get-ChildItem -Path $bundleDir -Recurse -File | ForEach-Object {
                  $file = $_;
                  $newName = $null;

                  # Regex to capture base name and the extension part for specific file types
                  # Example: "my_app_1.0.0.msi.zip" -> $base="my_app_1.0.0", $extPart=".msi.zip"
                  # Example: "my_app_1.0.0.msi" -> $base="my_app_1.0.0", $extPart=".msi"
                  if ($file.Name -match "^(.*)(\.msi\.zip)$") {
                      $base = $matches[1];
                      $extPart = $matches[2];
                      $newName = "${base}-fixed-webview2${extPart}";
                  } elseif ($file.Name -match "^(.*)(\.(msi|exe))$") {
                      $base = $matches[1];
                      $extPart = $matches[2];
                      $newName = "${base}-fixed-webview2${extPart}";
                  }

                  if ($newName) {
                      try {
                          Rename-Item -Path $file.FullName -NewName $newName -Force;
                          Write-Host "Successfully renamed ''$($file.Name)'' to ''$newName'' in $($file.DirectoryName)";
                      } catch {
                          Write-Error "Failed to rename ''$($file.Name)'' to ''$newName''. Error: $($_.Exception.Message)";
                      }
                  }
              };
              Write-Host "Artifact renaming process finished.";
            '
