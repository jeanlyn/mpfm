import { useTranslation } from 'react-i18next';

// 通用的 i18n hook
export const useI18n = () => {
  const { t, i18n } = useTranslation();

  const changeLanguage = (lng: string) => {
    i18n.changeLanguage(lng);
  };

  const getCurrentLanguage = () => {
    return i18n.language;
  };

  const getAvailableLanguages = () => {
    return Object.keys(i18n.options.resources || {});
  };

  return {
    t,
    changeLanguage,
    getCurrentLanguage,
    getAvailableLanguages,
    i18n,
  };
};

// 应用相关的 i18n hook
export const useAppI18n = () => {
  const { t } = useTranslation();

  return {
    // 应用通用文本
    app: {
      title: t('app.title'),
      loading: t('app.loading'),
      error: t('app.error'),
      success: t('app.success'),
      confirm: t('app.confirm'),
      cancel: t('app.cancel'),
      save: t('app.save'),
      delete: t('app.delete'),
      edit: t('app.edit'),
      create: t('app.create'),
      close: t('app.close'),
      refresh: t('app.refresh'),
      demo: {
        title: t('app.demo.title'),
        description: t('app.demo.description'),
      },
    },
    // 连接管理相关文本
    connection: {
      title: t('connection.title'),
      add: t('connection.add'),
      edit: t('connection.edit'),
      delete: t('connection.delete'),
      connect: t('connection.connect'),
      disconnect: t('connection.disconnect'),
      test: t('connection.test'),
      name: t('connection.name'),
      type: t('connection.type'),
      host: t('connection.host'),
      port: t('connection.port'),
      username: t('connection.username'),
      password: t('connection.password'),
      status: {
        connected: t('connection.status.connected'),
        disconnected: t('connection.status.disconnected'),
        connecting: t('connection.status.connecting'),
        error: t('connection.status.error'),
      },
      messages: {
        loadFailed: t('connection.messages.loadFailed'),
        connectSuccess: t('connection.messages.connectSuccess'),
        connectFailed: t('connection.messages.connectFailed'),
        disconnectSuccess: t('connection.messages.disconnectSuccess'),
        testSuccess: t('connection.messages.testSuccess'),
        testFailed: t('connection.messages.testFailed'),
        saveSuccess: t('connection.messages.saveSuccess'),
        deleteFailed: t('connection.messages.deleteFailed'),
        deleteSuccess: t('connection.messages.deleteSuccess'),
        addSuccess: t('connection.messages.addSuccess'),
        copySuccess: t('connection.messages.copySuccess'),
        copySuccessWithDirectory: t('connection.messages.copySuccessWithDirectory'),
        editSuccess: t('connection.messages.editSuccess'),
        addFailed: t('connection.messages.addFailed'),
        copyFailed: t('connection.messages.copyFailed'),
        editFailed: t('connection.messages.editFailed'),
      },
      modal: {
        addConnectionTitle: t('connection.modal.addConnectionTitle'),
        copyConnectionTitle: t('connection.modal.copyConnectionTitle'),
        editConnectionTitle: t('connection.modal.editConnectionTitle'),
        defaultTitle: t('connection.modal.defaultTitle'),
        addConnectionButton: t('connection.modal.addConnectionButton'),
        copyConnectionButton: t('connection.modal.copyConnectionButton'),
        editConnectionButton: t('connection.modal.editConnectionButton'),
        defaultButton: t('connection.modal.defaultButton'),
        nameLabel: t('connection.modal.nameLabel'),
        nameRequired: t('connection.modal.nameRequired'),
        namePlaceholder: t('connection.modal.namePlaceholder'),
        protocolLabel: t('connection.modal.protocolLabel'),
        protocolRequired: t('connection.modal.protocolRequired'),
        protocolPlaceholder: t('connection.modal.protocolPlaceholder'),
        protocolS3: t('connection.modal.protocolS3'),
        protocolFs: t('connection.modal.protocolFs'),
        directoryLabel: t('connection.modal.directoryLabel'),
        directoryPlaceholder: t('connection.modal.directoryPlaceholder'),
      },
      sidebar: {
        expand: t('connection.sidebar.expand'),
        collapse: t('connection.sidebar.collapse'),
        addConnection: t('connection.sidebar.addConnection'),
      },
      tooltips: {
        editConnection: t('connection.tooltips.editConnection'),
        copyConnection: t('connection.tooltips.copyConnection'),
        deleteConnection: t('connection.tooltips.deleteConnection'),
        confirmDeleteConnection: t('connection.tooltips.confirmDeleteConnection'),
        editDirectory: t('connection.tooltips.editDirectory'),
        deleteDirectory: t('connection.tooltips.deleteDirectory'),
        confirmDeleteDirectory: t('connection.tooltips.confirmDeleteDirectory'),
        addConnectionToDirectory: t('connection.tooltips.addConnectionToDirectory'),
      },
      fields: {
        bucketName: t('connection.fields.bucketName'),
        bucketNameRequired: t('connection.fields.bucketNameRequired'),
        bucketNamePlaceholder: t('connection.fields.bucketNamePlaceholder'),
        region: t('connection.fields.region'),
        regionRequired: t('connection.fields.regionRequired'),
        regionPlaceholder: t('connection.fields.regionPlaceholder'),
        endpoint: t('connection.fields.endpoint'),
        endpointPlaceholder: t('connection.fields.endpointPlaceholder'),
        accessKey: t('connection.fields.accessKey'),
        accessKeyRequired: t('connection.fields.accessKeyRequired'),
        accessKeyPlaceholder: t('connection.fields.accessKeyPlaceholder'),
        secretKey: t('connection.fields.secretKey'),
        secretKeyRequired: t('connection.fields.secretKeyRequired'),
        secretKeyPlaceholder: t('connection.fields.secretKeyPlaceholder'),
        host: t('connection.fields.host'),
        hostRequired: t('connection.fields.hostRequired'),
        hostPlaceholder: t('connection.fields.hostPlaceholder'),
        hostTooltip: t('connection.fields.hostTooltip'),
        port: t('connection.fields.port'),
        portRequired: t('connection.fields.portRequired'),
        portPlaceholder: t('connection.fields.portPlaceholder'),
        portTooltip: t('connection.fields.portTooltip'),
        username: t('connection.fields.username'),
        usernameRequired: t('connection.fields.usernameRequired'),
        usernamePlaceholder: t('connection.fields.usernamePlaceholder'),
        usernameTooltip: t('connection.fields.usernameTooltip'),
        password: t('connection.fields.password'),
        passwordRequired: t('connection.fields.passwordRequired'),
        passwordPlaceholder: t('connection.fields.passwordPlaceholder'),
        passwordTooltip: t('connection.fields.passwordTooltip'),
        rootDirectory: t('connection.fields.rootDirectory'),
        rootDirectoryRequired: t('connection.fields.rootDirectoryRequired'),
        rootDirectoryPlaceholder: t('connection.fields.rootDirectoryPlaceholder'),
        rootDirectoryTooltip: t('connection.fields.rootDirectoryTooltip'),
        secureConnection: t('connection.fields.secureConnection'),
        secureConnectionTooltip: t('connection.fields.secureConnectionTooltip'),
      },
    },
    // 文件管理器相关文本
    fileManager: {
      title: t('fileManager.title'),
      path: t('fileManager.path'),
      name: t('fileManager.name'),
      size: t('fileManager.size'),
      modified: t('fileManager.modified'),
      type: t('fileManager.type'),
      welcome: {
        selectConnection: t('fileManager.welcome.selectConnection'),
        selectConnectionDescription: t('fileManager.welcome.selectConnectionDescription'),
      },
      actions: {
        upload: t('fileManager.actions.upload'),
        download: t('fileManager.actions.download'),
        newFolder: t('fileManager.actions.newFolder'),
        rename: t('fileManager.actions.rename'),
        copy: t('fileManager.actions.copy'),
        move: t('fileManager.actions.move'),
        properties: t('fileManager.actions.properties'),
        batchDownload: t('fileManager.actions.batchDownload'),
        selectAll: t('fileManager.actions.selectAll'),
        deselectAll: t('fileManager.actions.deselectAll'),
      },
      dialogs: {
        selectFileToUpload: t('fileManager.dialogs.selectFileToUpload'),
        selectSaveLocation: t('fileManager.dialogs.selectSaveLocation'),
        createFolder: t('fileManager.dialogs.createFolder'),
        folderName: t('fileManager.dialogs.folderName'),
        selectDownloadLocation: t('fileManager.dialogs.selectDownloadLocation'),
      },
      messages: {
        uploadSuccess: t('fileManager.messages.uploadSuccess'),
        uploadFailed: t('fileManager.messages.uploadFailed'),
        downloadSuccess: t('fileManager.messages.downloadSuccess'),
        downloadFailed: t('fileManager.messages.downloadFailed'),
        deleteSuccess: t('fileManager.messages.deleteSuccess'),
        deleteFailed: t('fileManager.messages.deleteFailed'),
        renameSuccess: t('fileManager.messages.renameSuccess'),
        renameFailed: t('fileManager.messages.renameFailed'),
        copySuccess: t('fileManager.messages.copySuccess'),
        copyFailed: t('fileManager.messages.copyFailed'),
        moveSuccess: t('fileManager.messages.moveSuccess'),
        moveFailed: t('fileManager.messages.moveFailed'),
        loadFilesFailed: t('fileManager.messages.loadFilesFailed'),
        createDirectorySuccess: t('fileManager.messages.createDirectorySuccess'),
        createDirectoryFailed: t('fileManager.messages.createDirectoryFailed'),
        directoryCountWarning: t('fileManager.messages.directoryCountWarning'),
        searchFailed: t('fileManager.messages.searchFailed'),
        batchDownloadStarted: t('fileManager.messages.batchDownloadStarted'),
        batchDownloadCompleted: t('fileManager.messages.batchDownloadCompleted'),
        batchDownloadFailed: t('fileManager.messages.batchDownloadFailed'),
        noFilesSelected: t('fileManager.messages.noFilesSelected'),
        selectedFiles: t('fileManager.messages.selectedFiles'),
        selectSaveLocation: t('fileManager.messages.selectSaveLocation'),
        batchDownloadProgress: t('fileManager.messages.batchDownloadProgress'),
      },
      table: {
        confirmDelete: t('fileManager.table.confirmDelete'),
        deleteButton: t('fileManager.table.deleteButton'),
        downloadButton: t('fileManager.table.downloadButton'),
        previewButton: t('fileManager.table.previewButton'),
        selectFile: t('fileManager.table.selectFile'),
      },
      breadcrumb: {
        root: t('fileManager.breadcrumb.root'),
        pathInputPlaceholder: t('fileManager.breadcrumb.pathInputPlaceholder'),
        pathInputTooltip: t('fileManager.breadcrumb.pathInputTooltip'),
        invalidPath: t('fileManager.breadcrumb.invalidPath'),
      },
      toolbar: {
        goHome: t('fileManager.toolbar.goHome'),
        refresh: t('fileManager.toolbar.refresh'),
        goUp: t('fileManager.toolbar.goUp'),
        search: t('fileManager.toolbar.search'),
        createDirectory: t('fileManager.toolbar.createDirectory'),
        uploadFile: t('fileManager.toolbar.uploadFile'),
      },
      pagination: {
        mode: t('fileManager.pagination.mode'),
        total: t('fileManager.pagination.total'),
        search: t('fileManager.pagination.search'),
        yes: t('fileManager.pagination.yes'),
        no: t('fileManager.pagination.no'),
        showPerPage: t('fileManager.pagination.showPerPage'),
        items: t('fileManager.pagination.items'),
        pageInfo: t('fileManager.pagination.pageInfo'),
      },
      modal: {
        createDirectoryTitle: t('fileManager.modal.createDirectoryTitle'),
        directoryNamePlaceholder: t('fileManager.modal.directoryNamePlaceholder'),
      },
      performance: {
        tooManyFiles: t('fileManager.performance.tooManyFiles'),
        performanceDescription: t('fileManager.performance.performanceDescription'),
      },
    },
    // 文件类型相关文本
    fileTypes: {
      text: t('fileTypes.text'),
      json: t('fileTypes.json'),
      code: t('fileTypes.code'),
      image: t('fileTypes.image'),
      pdf: t('fileTypes.pdf'),
      excel: t('fileTypes.excel'),
      word: t('fileTypes.word'),
      unknown: t('fileTypes.unknown'),
    },
    // 目录管理相关文本
    directory: {
      title: t('directory.title'),
      defaultGroup: t('directory.defaultGroup'),
      defaultGroupCannotDelete: t('directory.defaultGroupCannotDelete'),
      addDirectory: t('directory.addDirectory'),
      saveDirectory: t('directory.saveDirectory'),
      editDirectory: t('directory.editDirectory'),
      deleteDirectory: t('directory.deleteDirectory'),
      loadConfigFailed: t('directory.loadConfigFailed'),
      saveConfigFailed: t('directory.saveConfigFailed'),
      addSuccess: t('directory.addSuccess'),
      editSuccess: t('directory.editSuccess'),
      deleteSuccess: t('directory.deleteSuccess'),
      operationFailed: t('directory.operationFailed'),
      exportSuccess: t('directory.exportSuccess'),
      exportFailed: t('directory.exportFailed'),
      importSuccess: t('directory.importSuccess'),
      importFailed: t('directory.importFailed'),
      configFormatError: t('directory.configFormatError'),
      moveConnectionSuccess: t('directory.moveConnectionSuccess'),
      connectionAlreadyInDirectory: t('directory.connectionAlreadyInDirectory'),
      connectionAlreadyInDirectoryDetailed: t('directory.connectionAlreadyInDirectoryDetailed'),
      connectionAddedToDirectory: t('directory.connectionAddedToDirectory'),
      modal: {
        addDirectoryTitle: t('directory.modal.addDirectoryTitle'),
        editDirectoryTitle: t('directory.modal.editDirectoryTitle'),
        directoryNameLabel: t('directory.modal.directoryNameLabel'),
        directoryNameRequired: t('directory.modal.directoryNameRequired'),
        directoryNamePlaceholder: t('directory.modal.directoryNamePlaceholder'),
        associatedConnectionsLabel: t('directory.modal.associatedConnectionsLabel'),
        associatedConnectionsPlaceholder: t('directory.modal.associatedConnectionsPlaceholder'),
        cancelButton: t('directory.modal.cancelButton'),
        saveDirectoryButton: t('directory.modal.saveDirectoryButton'),
        addDirectoryButton: t('directory.modal.addDirectoryButton'),
      },
      operations: {
        addNewDirectory: t('directory.operations.addNewDirectory'),
      },
    },
    // Tab 相关文本
    tabs: {
      closeOtherTabs: t('tabs.closeOtherTabs'),
      closeAllTabs: t('tabs.closeAllTabs'),
      selectConnection: t('tabs.selectConnection'),
    },
    // S3 相关文本
    s3: {
      bucketNotExists: t('s3.bucketNotExists'),
      bucketNotExistsDescription: t('s3.bucketNotExistsDescription'),
      createBucket: t('s3.createBucket'),
      bucketCreateSuccess: t('s3.bucketCreateSuccess'),
      bucketCreateFailed: t('s3.bucketCreateFailed'),
      checkBucketFailed: t('s3.checkBucketFailed'),
      operationCancelled: t('s3.operationCancelled'),
    },
    // 文件预览相关文本
    filePreview: {
      loading: t('filePreview.loading'),
      loadingImage: t('filePreview.loadingImage'),
      loadingFile: t('filePreview.loadingFile'),
      previewFailed: t('filePreview.previewFailed'),
      imageLoadFailed: t('filePreview.imageLoadFailed'),
      imageFileFailed: t('filePreview.imageFileFailed'),
      imageFormatNotSupported: t('filePreview.imageFormatNotSupported'),
      wordParsingDocument: t('filePreview.wordParsingDocument'),
      wordParseFailed: t('filePreview.wordParseFailed'),
      wordConversionWarning: t('filePreview.wordConversionWarning'),
      pdfPreviewFailed: t('filePreview.pdfPreviewFailed'),
      jsonParseError: t('filePreview.jsonParseError'),
      jsonFormatError: t('filePreview.jsonFormatError'),
      excelPreviewFailed: t('filePreview.excelPreviewFailed'),
      excelParseError: t('filePreview.excelParseError'),
      excelNoSheets: t('filePreview.excelNoSheets'),
      excelFileEmpty: t('filePreview.excelFileEmpty'),
      excelFileEmptyDescription: t('filePreview.excelFileEmptyDescription'),
      excelWorksheetEmpty: t('filePreview.excelWorksheetEmpty'),
      excelWorksheetEmptyDescription: t('filePreview.excelWorksheetEmptyDescription'),
      excelDisplayRows: t('filePreview.excelDisplayRows'),
      excelLimitedRows: t('filePreview.excelLimitedRows'),
      excelPaginationTotal: t('filePreview.excelPaginationTotal'),
      excelColumnPrefix: t('filePreview.excelColumnPrefix'),
      fileTooLarge: t('filePreview.fileTooLarge'),
      loadContentFailed: t('filePreview.loadContentFailed'),
      loadFileFailed: t('filePreview.loadFileFailed'),
      filePreviewTitle: t('filePreview.filePreviewTitle'),
      downloadFile: t('filePreview.downloadFile'),
      close: t('filePreview.close'),
      noContent: t('filePreview.noContent'),
      noContentDescription: t('filePreview.noContentDescription'),
      unsupportedFileType: t('filePreview.unsupportedFileType'),
      unsupportedFileDescription: t('filePreview.unsupportedFileDescription'),
      renderPreviewFailed: t('filePreview.renderPreviewFailed'),
      renderPreviewFailedDescription: t('filePreview.renderPreviewFailedDescription'),
      formatDisplay: t('filePreview.formatDisplay'),
      compressDisplay: t('filePreview.compressDisplay'),
      zoomIn: t('filePreview.zoomIn'),
      zoomOut: t('filePreview.zoomOut'),
      rotateLeft: t('filePreview.rotateLeft'),
      rotateRight: t('filePreview.rotateRight'),
      reset: t('filePreview.reset'),
      zoom: t('filePreview.zoom'),
      toolbar: t('filePreview.toolbar'),
    },
    // 设置相关文本
    settings: {
      title: t('settings.title'),
      language: t('settings.language'),
      theme: t('settings.theme'),
      general: t('settings.general'),
      appearance: t('settings.appearance'),
      advanced: t('settings.advanced'),
      languageDescription: t('settings.languageDescription'),
      lightTheme: t('settings.lightTheme'),
      darkTheme: t('settings.darkTheme'),
      autoTheme: t('settings.autoTheme'),
      compactMode: t('settings.compactMode'),
      autoConnect: t('settings.autoConnect'),
      showWelcomeOnStartup: t('settings.showWelcomeOnStartup'),
      virtualizeFileList: t('settings.virtualizeFileList'),
      developerMode: t('settings.developerMode'),
      verboseLogging: t('settings.verboseLogging'),
      debugInfo: t('settings.debugInfo'),
    },
    // 演示页面相关文本
    demo: {
      title: t('demo.title'),
      languageSwitch: t('demo.languageSwitch'),
      languageSwitchDescription: t('demo.languageSwitchDescription'),
      appCommonText: t('demo.appCommonText'),
      connectionManagementText: t('demo.connectionManagementText'),
      statusExample: t('demo.statusExample'),
      fileManagerText: t('demo.fileManagerText'),
      fieldNames: t('demo.fieldNames'),
      settingsText: t('demo.settingsText'),
      directUseTFunction: t('demo.directUseTFunction'),
      appTitle: t('demo.appTitle'),
      currentLanguageExample: t('demo.currentLanguageExample'),
    },
  };
};
